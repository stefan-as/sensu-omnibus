#!/bin/sh
#
# WARNING: REQUIRES /bin/sh
#
# - must run on /bin/sh on solaris 9
# - must run on /bin/sh on AIX 6.x
# - if you think you are a bash wizard, you probably do not understand
#   this programming language.  do not touch.
# - if you are under 40, get peer review from your elders.
#
# Perform necessary sensu setup steps
# after package is installed.
#

set -e

using_systemd()
{
    [ -e "/proc/1/comm" ] && grep -q "^systemd$" /proc/1/comm
}

PROGNAME=`basename $0`

<% if platform_family == "freebsd" -%>
ETC_DIR=/usr/local/etc
<% else -%>
ETC_DIR=/etc
<% end -%>

INSTALLER_DIR=/opt/sensu
EMBEDDED_DIR=$INSTALLER_DIR/embedded
EMBEDDED_BIN_DIR=$EMBEDDED_DIR/bin
SHARE_DIR=$EMBEDDED_DIR/share
LOG_DIR=/var/log/sensu
PID_DIR=/var/run/sensu
TMP_DIR=/var/cache/sensu
CONFIG_DIR=$ETC_DIR/sensu
CONFD_DIR=$CONFIG_DIR/conf.d
PLUGINS_DIR=$CONFIG_DIR/plugins
EXTENSIONS_DIR=$CONFIG_DIR/extensions
DEFAULTS_DIR=$ETC_DIR/default

LOG_FILE=$LOG_DIR/sensu-client.log
CONFIG_FILE=$CONFIG_DIR/config.json

LOG_LEVEL=info

OPTIONS="-c $CONFIG_FILE -d $CONFD_DIR -e $EXTENSIONS_DIR -l $LOG_FILE -L $LOG_LEVEL"

SENSU_PATHS=$EMBEDDED_BIN_DIR:$PATH:$PLUGINS_DIR:$HANDLERS_DIR
SENSU_GEM_PATHS=$EMBEDDED_DIR/lib/ruby/gems/2.2.0:$GEM_PATH

SYSV_SCRIPTS_EXIST=false

<% if platform_family == "mac_os_x" -%>
SENSU_USER=_sensu
SENSU_GROUP=_sensu
<% else -%>
SENSU_USER=sensu
SENSU_GROUP=sensu
<% end -%>

error_exit()
{
    echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
    exit 1
}

create_sensu_user_aix()
{
    # add /usr/bin/false to the list of allowed shells
    # NOTE: this is all terrible and makes kittens cry.
    # it should all be replaced by a single, idempotent command
    set +e
    /usr/bin/lssec -f /etc/security/login.cfg -s usw -a shells | /usr/bin/grep "/usr/bin/false" > /dev/null
    RC=$?
    set -e
    if [ "${RC}" != "0" ]; then
	SHVAL=`/usr/bin/lssec -f /etc/security/login.cfg -s usw -a shells | /usr/bin/cut -d '=' -f2`
	/usr/bin/chsec -f /etc/security/login.cfg -s usw -a shells="${SHVAL},/usr/bin/false"
    fi

    # create the system user
    mkuser pgrp="sensu" shell="/usr/bin/false" home="/opt/sensu" sensu
}

create_sensu_user_group()
{
    # create sensu group
    set +e
    <% case platform_family
    when "mac_os_x" -%>
    dscl . -list /Groups | grep "^_sensu" > /dev/null
    <% when "linux" -%>
    getent group sensu > /dev/null
    <% else -%>
    grep "^sensu:" /etc/group > /dev/null
    <% end -%>
    RC=$?
    set -e
    if [ "${RC}" != "0" ]; then
	<% case platform_family
	when "aix" -%>
	mkgroup sensu
	<% when "solaris2" -%>
	groupadd sensu
	<% when "freebsd" -%>
	pw groupadd sensu
	<% when "debian", "rhel" -%>
	groupadd -r sensu
	<% when "mac_os_x" -%>
	last_used_gid=`dscacheutil -q group | grep gid | tail -n 1 | awk '{ print $2 }'`
	sensu_gid=`echo "$last_used_gid + 1" | bc`
	dscl . -create Groups/_sensu
	dscl . -create Groups/_sensu PrimaryGroupID $sensu_gid
	<% else raise "Group creation undefined for platform family \"#{platform_family}\"" -%>
	<% end -%>
    fi

    # create sensu user
    set +e
    <% case platform_family
    when "mac_os_x" -%>
    dscl . -list /Users | grep "^_sensu" > /dev/null
    <% when "linux" -%>
    getent passwd sensu > /dev/null
    <% else -%>
    grep "^sensu:" /etc/passwd > /dev/null
    <% end -%>
    RC=$?
    set -e
    if [ "${RC}" != "0" ]; then
	<% case platform_family
	when "aix" -%>
	create_sensu_user_aix
	<% when "solaris2" -%>
	useradd -d $INSTALLER_DIR -g sensu sensu # user will be disabled by default
	passwd -N sensu # enable the user with nologin (NL)
	<% when "freebsd" -%>
	pw adduser sensu -g sensu -d /nonexistent -s /usr/sbin/nologin -c "Sensu Monitoring Framework"
	<% when "debian", "rhel" -%>
	useradd -r -g sensu -d /opt/sensu -s /bin/false -c "Sensu Monitoring Framework" sensu
	<% when "mac_os_x" -%>
	sensu_gid=`dscl . -read /Groups/_sensu | awk '($1 == "PrimaryGroupID:") { print $2 }'`
	dscl . -create /Users/_sensu UniqueID $sensu_gid
	dscl . -create /Users/_sensu PrimaryGroupID $sensu_gid
	dscl . -create /Users/_sensu UserShell /usr/bin/false
	<% else raise "User creation undefined for platform family \"#{platform_family}\"" -%>
	<% end -%>
    fi
}

chown_sensu_dirs()
{
    set -e
    # Ensure all files/directories in $INSTALLER_DIR are owned by root.
    chown -Rh 0:0 $INSTALLER_DIR
    find $CONFIG_DIR -path $CONFD_DIR -prune -o -type f -print | xargs chown $SENSU_USER:$SENSU_GROUP
    chown -R $SENSU_USER:$SENSU_GROUP $LOG_DIR
    chown -R $SENSU_USER:$SENSU_GROUP $PID_DIR
    chown -R $SENSU_USER:$SENSU_GROUP $TMP_DIR
}

create_system_services()
{
    <% if platform_family == "aix" -%>
    set +e
    rmssys -s sensu-client 2>&1 > /dev/null
    set -e
    mkssys -s sensu-client -p "/opt/sensu/bin/sensu-service" -a "start client" -u sensu -S -n 15 -f 9 > /dev/null
    <% else -%>
    # this function is a noop on <%= platform_family %>
    return
    <% end -%>
}

<% case platform_family
when "rhel" -%>
if [ $1 -eq 1 ]; then
    create_sensu_user_group
fi
set +e
if using_systemd; then
    systemctl daemon-reload
fi
set -e
chown_sensu_dirs
<% when "debian" -%>
case "$1" in
    configure)
	create_sensu_user_group
	chown_sensu_dirs
	;;

    abort-upgrade|abort-remove|abort-deconfigure)
	;;

    *)
	echo "postinst called with unknown argument \`$1'" >&2
	exit 1
	;;
esac
<% else -%>
create_sensu_user_group
chown_sensu_dirs
create_system_services
<% end -%>

exit 0
EOF
